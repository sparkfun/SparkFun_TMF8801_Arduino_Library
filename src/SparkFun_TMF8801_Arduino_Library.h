/*
  This is a library written for the AMS TMF-8801 Time-of-flight sensor
  SparkFun sells these at its website:
  https://www.sparkfun.com/products/17716

  Do you like this library? Help support open source hardware. Buy a board!

  Written by Ricardo Ramos  @ SparkFun Electronics, February 15th, 2021
  This file is the core of the TMF-8801 ToF sensor library.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef __TMF8801_LIBRARY__
#define __TMF8801_LIBRARY__

#include <Arduino.h>
#include <Wire.h>
#include "SparkFun_TMF8801_Constants.h"
#include "SparkFun_TMF8801_IO.h"

#if (ARDUINO >= 100)
#include "Arduino.h"
#else
#include "WProgram.h"
#endif

class TMF8801
{
private:
	// CMD_DATA_7 to CMD_DATA_0 values used by updateCommandData8 function
	// CMD_DATA_7 is commandDataValues[0], CMD_DATA_6 is commandDataValues[1] and so forth...
	byte commandDataValues[8] = {0x03, 0x23, 0x44, 0x00, 0x00, 0x64, 0xD8, 0xA4 };

	// Sample number
	byte resultNumber;

	// Hold result status like measurement status and reliability
	byte resultInfo;

	// Distance in millimeters
	int distancePeak;

	// I2C address
	byte address;

	// I2C communication object instance
	TMF8801_IO tmf8801_io;	

	// Holds last error generated by a function call
	byte lastError;	

	// Polls if TMF8801's CPU is ready
	bool cpuReady();

	// Polls if TMF8801's application is ready
	bool applicationReady();

	// Measures distance
	void doMeasurement();

	// Updates registers CMD_DATA_7 to CMD_DATA_0 with commandDataValues array
	void updateCommandData8();

public:
	// Default GPIO1 mode. You can find allowed values in SparkFun_TMF8801_Constants.h
	byte gpio1_prog = MODE_LOW_OUTPUT;

	// Default GPIO1 mode. You can find allowed values in SparkFun_TMF8801_Constants.h
	byte gpio0_prog = MODE_LOW_OUTPUT;

	// Calibration data. Can be overwritten.
	byte calibrationData[14] = { 0xC1, 0x22, 0x0, 0x1C, 0x9, 0x40, 0x8C, 0x98, 0xA, 0x15, 0xCE, 0x9C, 0x1, 0xFC };

	// Default constructor
	TMF8801() {}	

	// Initializes TMF8801
	bool begin(byte address = DEFAULT_I2C_ADDR, TwoWire& wirePort = Wire);	

	// Checks if TMF8801 has available data
	bool dataAvailable();

	// Polls if TMF8801 is connected and if chip ID matches TMF8801 chip id.
	bool isConnected();

	// Get TMF8801 status
	byte getStatus();

	// Get last error 
	byte getLastError();	

	// Returns distance in mm
	int getDistance();	

	// Enable interrupt generation on each measurement
	void enableInterrupt();

	// Disable interrupt generation on each measurement
	void disableInterrupt();

	// Marks interrupt flag as processed
	void clearInterruptFlag();

	// Returns true if measurement is enabled
	bool measurementEnabled();

	// Sets GPIO0 mode - You can find allowed values in SparkFun_TMF8801_Constants.h
	void setGPIO0Mode(byte gpioMode);

	// Returns current GPIO0 mode - You can find returned values in SparkFun_TMF8801_Constants.h
	byte getGPIO0Mode();

	// Sets GPIO1 mode - You can find allowed values in SparkFun_TMF8801_Constants.h
	void setGPIO1Mode(byte gpioMode);

	// Returns current GPIO1 mode - You can find returned values in SparkFun_TMF8801_Constants.h
	byte getGPIO1Mode();

	// Returns specific register value. Registers' descriptions can be found in TMF8801 datasheet.
	byte getRegisterValue(byte reg);

	// Sets register value. Registers' descriptions can be found in TMF8801 datasheet.
	void setRegisterValue(byte reg, byte value);

	// Returns multiples values from register to byte array buffer. No array boundary check is done. Registers' descriptions can be found in TMF8801 datasheet.
	void getRegisterMultipleValues(byte reg, byte* buffer, byte length);

	// Sets multiple values to register from byte buffer. No array boundary check is done. Registers' descriptions can be found in TMF8801 datasheet.
	void setRegisterMultipleValues(byte reg, const byte* buffer, byte length);

	// Gets calibration data from TMF8801 to calibrationResults byte array. Size is fixed to 14 bytes.
	bool getCalibrationData(byte* calibrationResults);

	// Sets calibration data from TMF8801 from newCalibrationData byte array. Size is fixed to 14 bytes.
	void setCalibrationData(const byte* newCalibrationData);

	// Returns current hardware version number
	byte getHardwareVersion();

	// Returns major application version number
	byte getApplicationVersionMajor();

	// Returns minor application version number
	byte getApplicationVersionMinor();

	// Returns device's serial number
	short getSerialNumber();

	// Returns measurement reliability. 0 = worse, 63 = best. Check TMF8801 datasheet.
	byte getMeasurementReliability();

	// Returns measurement status. Check TMF8801 datasheet.
	byte getMeasurementStatus();

	// Returns current measurement sample number
	byte getMeasurementNumber();

	// Resets board after specific registers programming
	void resetDevice();

	// Wakes device up after ENABLE pin is brought back to HIGH
	void wakeUpDevice();
};

#endif